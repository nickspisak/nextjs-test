
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model chapters
 * 
 */
export type chapters = {
  title: string | null
  chapter_id: number
  chapter_number: number | null
  summary: string | null
  id: number | null
  first: boolean
  last: boolean
}

/**
 * Model pages
 * 
 */
export type pages = {
  chapter_id: number | null
  page_id: number
  page_number: number | null
  page_url: string | null
}

/**
 * Model stories
 * 
 */
export type stories = {
  id: number
  title: string
  description: string
  genres: string
  cover: string
  url: string | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Chapters
 * const chapters = await prisma.chapters.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Chapters
   * const chapters = await prisma.chapters.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.chapters`: Exposes CRUD operations for the **chapters** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chapters
    * const chapters = await prisma.chapters.findMany()
    * ```
    */
  get chapters(): Prisma.chaptersDelegate<GlobalReject>;

  /**
   * `prisma.pages`: Exposes CRUD operations for the **pages** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pages
    * const pages = await prisma.pages.findMany()
    * ```
    */
  get pages(): Prisma.pagesDelegate<GlobalReject>;

  /**
   * `prisma.stories`: Exposes CRUD operations for the **stories** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stories
    * const stories = await prisma.stories.findMany()
    * ```
    */
  get stories(): Prisma.storiesDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.11.0
   * Query Engine version: 8fde8fef4033376662cad983758335009d522acb
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    chapters: 'chapters',
    pages: 'pages',
    stories: 'stories'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ChaptersCountOutputType
   */


  export type ChaptersCountOutputType = {
    pages: number
  }

  export type ChaptersCountOutputTypeSelect = {
    pages?: boolean
  }

  export type ChaptersCountOutputTypeGetPayload<S extends boolean | null | undefined | ChaptersCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ChaptersCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ChaptersCountOutputTypeArgs)
    ? ChaptersCountOutputType 
    : S extends { select: any } & (ChaptersCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ChaptersCountOutputType ? ChaptersCountOutputType[P] : never
  } 
      : ChaptersCountOutputType




  // Custom InputTypes

  /**
   * ChaptersCountOutputType without action
   */
  export type ChaptersCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ChaptersCountOutputType
     */
    select?: ChaptersCountOutputTypeSelect | null
  }



  /**
   * Count Type StoriesCountOutputType
   */


  export type StoriesCountOutputType = {
    chapters: number
  }

  export type StoriesCountOutputTypeSelect = {
    chapters?: boolean
  }

  export type StoriesCountOutputTypeGetPayload<S extends boolean | null | undefined | StoriesCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? StoriesCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (StoriesCountOutputTypeArgs)
    ? StoriesCountOutputType 
    : S extends { select: any } & (StoriesCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof StoriesCountOutputType ? StoriesCountOutputType[P] : never
  } 
      : StoriesCountOutputType




  // Custom InputTypes

  /**
   * StoriesCountOutputType without action
   */
  export type StoriesCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the StoriesCountOutputType
     */
    select?: StoriesCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model chapters
   */


  export type AggregateChapters = {
    _count: ChaptersCountAggregateOutputType | null
    _avg: ChaptersAvgAggregateOutputType | null
    _sum: ChaptersSumAggregateOutputType | null
    _min: ChaptersMinAggregateOutputType | null
    _max: ChaptersMaxAggregateOutputType | null
  }

  export type ChaptersAvgAggregateOutputType = {
    chapter_id: number | null
    chapter_number: number | null
    id: number | null
  }

  export type ChaptersSumAggregateOutputType = {
    chapter_id: number | null
    chapter_number: number | null
    id: number | null
  }

  export type ChaptersMinAggregateOutputType = {
    title: string | null
    chapter_id: number | null
    chapter_number: number | null
    summary: string | null
    id: number | null
    first: boolean | null
    last: boolean | null
  }

  export type ChaptersMaxAggregateOutputType = {
    title: string | null
    chapter_id: number | null
    chapter_number: number | null
    summary: string | null
    id: number | null
    first: boolean | null
    last: boolean | null
  }

  export type ChaptersCountAggregateOutputType = {
    title: number
    chapter_id: number
    chapter_number: number
    summary: number
    id: number
    first: number
    last: number
    _all: number
  }


  export type ChaptersAvgAggregateInputType = {
    chapter_id?: true
    chapter_number?: true
    id?: true
  }

  export type ChaptersSumAggregateInputType = {
    chapter_id?: true
    chapter_number?: true
    id?: true
  }

  export type ChaptersMinAggregateInputType = {
    title?: true
    chapter_id?: true
    chapter_number?: true
    summary?: true
    id?: true
    first?: true
    last?: true
  }

  export type ChaptersMaxAggregateInputType = {
    title?: true
    chapter_id?: true
    chapter_number?: true
    summary?: true
    id?: true
    first?: true
    last?: true
  }

  export type ChaptersCountAggregateInputType = {
    title?: true
    chapter_id?: true
    chapter_number?: true
    summary?: true
    id?: true
    first?: true
    last?: true
    _all?: true
  }

  export type ChaptersAggregateArgs = {
    /**
     * Filter which chapters to aggregate.
     */
    where?: chaptersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chapters to fetch.
     */
    orderBy?: Enumerable<chaptersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: chaptersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chapters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chapters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chapters
    **/
    _count?: true | ChaptersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChaptersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChaptersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChaptersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChaptersMaxAggregateInputType
  }

  export type GetChaptersAggregateType<T extends ChaptersAggregateArgs> = {
        [P in keyof T & keyof AggregateChapters]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChapters[P]>
      : GetScalarType<T[P], AggregateChapters[P]>
  }




  export type ChaptersGroupByArgs = {
    where?: chaptersWhereInput
    orderBy?: Enumerable<chaptersOrderByWithAggregationInput>
    by: ChaptersScalarFieldEnum[]
    having?: chaptersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChaptersCountAggregateInputType | true
    _avg?: ChaptersAvgAggregateInputType
    _sum?: ChaptersSumAggregateInputType
    _min?: ChaptersMinAggregateInputType
    _max?: ChaptersMaxAggregateInputType
  }


  export type ChaptersGroupByOutputType = {
    title: string | null
    chapter_id: number
    chapter_number: number | null
    summary: string | null
    id: number | null
    first: boolean
    last: boolean
    _count: ChaptersCountAggregateOutputType | null
    _avg: ChaptersAvgAggregateOutputType | null
    _sum: ChaptersSumAggregateOutputType | null
    _min: ChaptersMinAggregateOutputType | null
    _max: ChaptersMaxAggregateOutputType | null
  }

  type GetChaptersGroupByPayload<T extends ChaptersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ChaptersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChaptersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChaptersGroupByOutputType[P]>
            : GetScalarType<T[P], ChaptersGroupByOutputType[P]>
        }
      >
    >


  export type chaptersSelect = {
    title?: boolean
    chapter_id?: boolean
    chapter_number?: boolean
    summary?: boolean
    id?: boolean
    first?: boolean
    last?: boolean
    stories?: boolean | storiesArgs
    pages?: boolean | chapters$pagesArgs
    _count?: boolean | ChaptersCountOutputTypeArgs
  }


  export type chaptersInclude = {
    stories?: boolean | storiesArgs
    pages?: boolean | chapters$pagesArgs
    _count?: boolean | ChaptersCountOutputTypeArgs
  }

  export type chaptersGetPayload<S extends boolean | null | undefined | chaptersArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? chapters :
    S extends undefined ? never :
    S extends { include: any } & (chaptersArgs | chaptersFindManyArgs)
    ? chapters  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'stories' ? storiesGetPayload<S['include'][P]> | null :
        P extends 'pages' ? Array < pagesGetPayload<S['include'][P]>>  :
        P extends '_count' ? ChaptersCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (chaptersArgs | chaptersFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'stories' ? storiesGetPayload<S['select'][P]> | null :
        P extends 'pages' ? Array < pagesGetPayload<S['select'][P]>>  :
        P extends '_count' ? ChaptersCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof chapters ? chapters[P] : never
  } 
      : chapters


  type chaptersCountArgs = 
    Omit<chaptersFindManyArgs, 'select' | 'include'> & {
      select?: ChaptersCountAggregateInputType | true
    }

  export interface chaptersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Chapters that matches the filter.
     * @param {chaptersFindUniqueArgs} args - Arguments to find a Chapters
     * @example
     * // Get one Chapters
     * const chapters = await prisma.chapters.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chaptersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, chaptersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'chapters'> extends True ? Prisma__chaptersClient<chaptersGetPayload<T>> : Prisma__chaptersClient<chaptersGetPayload<T> | null, null>

    /**
     * Find one Chapters that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {chaptersFindUniqueOrThrowArgs} args - Arguments to find a Chapters
     * @example
     * // Get one Chapters
     * const chapters = await prisma.chapters.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chaptersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, chaptersFindUniqueOrThrowArgs>
    ): Prisma__chaptersClient<chaptersGetPayload<T>>

    /**
     * Find the first Chapters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chaptersFindFirstArgs} args - Arguments to find a Chapters
     * @example
     * // Get one Chapters
     * const chapters = await prisma.chapters.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chaptersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, chaptersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'chapters'> extends True ? Prisma__chaptersClient<chaptersGetPayload<T>> : Prisma__chaptersClient<chaptersGetPayload<T> | null, null>

    /**
     * Find the first Chapters that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chaptersFindFirstOrThrowArgs} args - Arguments to find a Chapters
     * @example
     * // Get one Chapters
     * const chapters = await prisma.chapters.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chaptersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, chaptersFindFirstOrThrowArgs>
    ): Prisma__chaptersClient<chaptersGetPayload<T>>

    /**
     * Find zero or more Chapters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chaptersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chapters
     * const chapters = await prisma.chapters.findMany()
     * 
     * // Get first 10 Chapters
     * const chapters = await prisma.chapters.findMany({ take: 10 })
     * 
     * // Only select the `title`
     * const chaptersWithTitleOnly = await prisma.chapters.findMany({ select: { title: true } })
     * 
    **/
    findMany<T extends chaptersFindManyArgs>(
      args?: SelectSubset<T, chaptersFindManyArgs>
    ): Prisma.PrismaPromise<Array<chaptersGetPayload<T>>>

    /**
     * Create a Chapters.
     * @param {chaptersCreateArgs} args - Arguments to create a Chapters.
     * @example
     * // Create one Chapters
     * const Chapters = await prisma.chapters.create({
     *   data: {
     *     // ... data to create a Chapters
     *   }
     * })
     * 
    **/
    create<T extends chaptersCreateArgs>(
      args: SelectSubset<T, chaptersCreateArgs>
    ): Prisma__chaptersClient<chaptersGetPayload<T>>

    /**
     * Create many Chapters.
     *     @param {chaptersCreateManyArgs} args - Arguments to create many Chapters.
     *     @example
     *     // Create many Chapters
     *     const chapters = await prisma.chapters.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends chaptersCreateManyArgs>(
      args?: SelectSubset<T, chaptersCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Chapters.
     * @param {chaptersDeleteArgs} args - Arguments to delete one Chapters.
     * @example
     * // Delete one Chapters
     * const Chapters = await prisma.chapters.delete({
     *   where: {
     *     // ... filter to delete one Chapters
     *   }
     * })
     * 
    **/
    delete<T extends chaptersDeleteArgs>(
      args: SelectSubset<T, chaptersDeleteArgs>
    ): Prisma__chaptersClient<chaptersGetPayload<T>>

    /**
     * Update one Chapters.
     * @param {chaptersUpdateArgs} args - Arguments to update one Chapters.
     * @example
     * // Update one Chapters
     * const chapters = await prisma.chapters.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chaptersUpdateArgs>(
      args: SelectSubset<T, chaptersUpdateArgs>
    ): Prisma__chaptersClient<chaptersGetPayload<T>>

    /**
     * Delete zero or more Chapters.
     * @param {chaptersDeleteManyArgs} args - Arguments to filter Chapters to delete.
     * @example
     * // Delete a few Chapters
     * const { count } = await prisma.chapters.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chaptersDeleteManyArgs>(
      args?: SelectSubset<T, chaptersDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chapters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chaptersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chapters
     * const chapters = await prisma.chapters.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chaptersUpdateManyArgs>(
      args: SelectSubset<T, chaptersUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Chapters.
     * @param {chaptersUpsertArgs} args - Arguments to update or create a Chapters.
     * @example
     * // Update or create a Chapters
     * const chapters = await prisma.chapters.upsert({
     *   create: {
     *     // ... data to create a Chapters
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chapters we want to update
     *   }
     * })
    **/
    upsert<T extends chaptersUpsertArgs>(
      args: SelectSubset<T, chaptersUpsertArgs>
    ): Prisma__chaptersClient<chaptersGetPayload<T>>

    /**
     * Count the number of Chapters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chaptersCountArgs} args - Arguments to filter Chapters to count.
     * @example
     * // Count the number of Chapters
     * const count = await prisma.chapters.count({
     *   where: {
     *     // ... the filter for the Chapters we want to count
     *   }
     * })
    **/
    count<T extends chaptersCountArgs>(
      args?: Subset<T, chaptersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChaptersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chapters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChaptersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChaptersAggregateArgs>(args: Subset<T, ChaptersAggregateArgs>): Prisma.PrismaPromise<GetChaptersAggregateType<T>>

    /**
     * Group by Chapters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChaptersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChaptersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChaptersGroupByArgs['orderBy'] }
        : { orderBy?: ChaptersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChaptersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChaptersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for chapters.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__chaptersClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    stories<T extends storiesArgs= {}>(args?: Subset<T, storiesArgs>): Prisma__storiesClient<storiesGetPayload<T> | Null>;

    pages<T extends chapters$pagesArgs= {}>(args?: Subset<T, chapters$pagesArgs>): Prisma.PrismaPromise<Array<pagesGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * chapters base type for findUnique actions
   */
  export type chaptersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the chapters
     */
    select?: chaptersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: chaptersInclude | null
    /**
     * Filter, which chapters to fetch.
     */
    where: chaptersWhereUniqueInput
  }

  /**
   * chapters findUnique
   */
  export interface chaptersFindUniqueArgs extends chaptersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chapters findUniqueOrThrow
   */
  export type chaptersFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chapters
     */
    select?: chaptersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: chaptersInclude | null
    /**
     * Filter, which chapters to fetch.
     */
    where: chaptersWhereUniqueInput
  }


  /**
   * chapters base type for findFirst actions
   */
  export type chaptersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the chapters
     */
    select?: chaptersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: chaptersInclude | null
    /**
     * Filter, which chapters to fetch.
     */
    where?: chaptersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chapters to fetch.
     */
    orderBy?: Enumerable<chaptersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chapters.
     */
    cursor?: chaptersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chapters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chapters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chapters.
     */
    distinct?: Enumerable<ChaptersScalarFieldEnum>
  }

  /**
   * chapters findFirst
   */
  export interface chaptersFindFirstArgs extends chaptersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chapters findFirstOrThrow
   */
  export type chaptersFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chapters
     */
    select?: chaptersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: chaptersInclude | null
    /**
     * Filter, which chapters to fetch.
     */
    where?: chaptersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chapters to fetch.
     */
    orderBy?: Enumerable<chaptersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chapters.
     */
    cursor?: chaptersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chapters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chapters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chapters.
     */
    distinct?: Enumerable<ChaptersScalarFieldEnum>
  }


  /**
   * chapters findMany
   */
  export type chaptersFindManyArgs = {
    /**
     * Select specific fields to fetch from the chapters
     */
    select?: chaptersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: chaptersInclude | null
    /**
     * Filter, which chapters to fetch.
     */
    where?: chaptersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chapters to fetch.
     */
    orderBy?: Enumerable<chaptersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chapters.
     */
    cursor?: chaptersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chapters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chapters.
     */
    skip?: number
    distinct?: Enumerable<ChaptersScalarFieldEnum>
  }


  /**
   * chapters create
   */
  export type chaptersCreateArgs = {
    /**
     * Select specific fields to fetch from the chapters
     */
    select?: chaptersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: chaptersInclude | null
    /**
     * The data needed to create a chapters.
     */
    data: XOR<chaptersCreateInput, chaptersUncheckedCreateInput>
  }


  /**
   * chapters createMany
   */
  export type chaptersCreateManyArgs = {
    /**
     * The data used to create many chapters.
     */
    data: Enumerable<chaptersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * chapters update
   */
  export type chaptersUpdateArgs = {
    /**
     * Select specific fields to fetch from the chapters
     */
    select?: chaptersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: chaptersInclude | null
    /**
     * The data needed to update a chapters.
     */
    data: XOR<chaptersUpdateInput, chaptersUncheckedUpdateInput>
    /**
     * Choose, which chapters to update.
     */
    where: chaptersWhereUniqueInput
  }


  /**
   * chapters updateMany
   */
  export type chaptersUpdateManyArgs = {
    /**
     * The data used to update chapters.
     */
    data: XOR<chaptersUpdateManyMutationInput, chaptersUncheckedUpdateManyInput>
    /**
     * Filter which chapters to update
     */
    where?: chaptersWhereInput
  }


  /**
   * chapters upsert
   */
  export type chaptersUpsertArgs = {
    /**
     * Select specific fields to fetch from the chapters
     */
    select?: chaptersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: chaptersInclude | null
    /**
     * The filter to search for the chapters to update in case it exists.
     */
    where: chaptersWhereUniqueInput
    /**
     * In case the chapters found by the `where` argument doesn't exist, create a new chapters with this data.
     */
    create: XOR<chaptersCreateInput, chaptersUncheckedCreateInput>
    /**
     * In case the chapters was found with the provided `where` argument, update it with this data.
     */
    update: XOR<chaptersUpdateInput, chaptersUncheckedUpdateInput>
  }


  /**
   * chapters delete
   */
  export type chaptersDeleteArgs = {
    /**
     * Select specific fields to fetch from the chapters
     */
    select?: chaptersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: chaptersInclude | null
    /**
     * Filter which chapters to delete.
     */
    where: chaptersWhereUniqueInput
  }


  /**
   * chapters deleteMany
   */
  export type chaptersDeleteManyArgs = {
    /**
     * Filter which chapters to delete
     */
    where?: chaptersWhereInput
  }


  /**
   * chapters.pages
   */
  export type chapters$pagesArgs = {
    /**
     * Select specific fields to fetch from the pages
     */
    select?: pagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: pagesInclude | null
    where?: pagesWhereInput
    orderBy?: Enumerable<pagesOrderByWithRelationInput>
    cursor?: pagesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PagesScalarFieldEnum>
  }


  /**
   * chapters without action
   */
  export type chaptersArgs = {
    /**
     * Select specific fields to fetch from the chapters
     */
    select?: chaptersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: chaptersInclude | null
  }



  /**
   * Model pages
   */


  export type AggregatePages = {
    _count: PagesCountAggregateOutputType | null
    _avg: PagesAvgAggregateOutputType | null
    _sum: PagesSumAggregateOutputType | null
    _min: PagesMinAggregateOutputType | null
    _max: PagesMaxAggregateOutputType | null
  }

  export type PagesAvgAggregateOutputType = {
    chapter_id: number | null
    page_id: number | null
    page_number: number | null
  }

  export type PagesSumAggregateOutputType = {
    chapter_id: number | null
    page_id: number | null
    page_number: number | null
  }

  export type PagesMinAggregateOutputType = {
    chapter_id: number | null
    page_id: number | null
    page_number: number | null
    page_url: string | null
  }

  export type PagesMaxAggregateOutputType = {
    chapter_id: number | null
    page_id: number | null
    page_number: number | null
    page_url: string | null
  }

  export type PagesCountAggregateOutputType = {
    chapter_id: number
    page_id: number
    page_number: number
    page_url: number
    _all: number
  }


  export type PagesAvgAggregateInputType = {
    chapter_id?: true
    page_id?: true
    page_number?: true
  }

  export type PagesSumAggregateInputType = {
    chapter_id?: true
    page_id?: true
    page_number?: true
  }

  export type PagesMinAggregateInputType = {
    chapter_id?: true
    page_id?: true
    page_number?: true
    page_url?: true
  }

  export type PagesMaxAggregateInputType = {
    chapter_id?: true
    page_id?: true
    page_number?: true
    page_url?: true
  }

  export type PagesCountAggregateInputType = {
    chapter_id?: true
    page_id?: true
    page_number?: true
    page_url?: true
    _all?: true
  }

  export type PagesAggregateArgs = {
    /**
     * Filter which pages to aggregate.
     */
    where?: pagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pages to fetch.
     */
    orderBy?: Enumerable<pagesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: pagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned pages
    **/
    _count?: true | PagesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PagesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PagesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PagesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PagesMaxAggregateInputType
  }

  export type GetPagesAggregateType<T extends PagesAggregateArgs> = {
        [P in keyof T & keyof AggregatePages]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePages[P]>
      : GetScalarType<T[P], AggregatePages[P]>
  }




  export type PagesGroupByArgs = {
    where?: pagesWhereInput
    orderBy?: Enumerable<pagesOrderByWithAggregationInput>
    by: PagesScalarFieldEnum[]
    having?: pagesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PagesCountAggregateInputType | true
    _avg?: PagesAvgAggregateInputType
    _sum?: PagesSumAggregateInputType
    _min?: PagesMinAggregateInputType
    _max?: PagesMaxAggregateInputType
  }


  export type PagesGroupByOutputType = {
    chapter_id: number | null
    page_id: number
    page_number: number | null
    page_url: string | null
    _count: PagesCountAggregateOutputType | null
    _avg: PagesAvgAggregateOutputType | null
    _sum: PagesSumAggregateOutputType | null
    _min: PagesMinAggregateOutputType | null
    _max: PagesMaxAggregateOutputType | null
  }

  type GetPagesGroupByPayload<T extends PagesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PagesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PagesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PagesGroupByOutputType[P]>
            : GetScalarType<T[P], PagesGroupByOutputType[P]>
        }
      >
    >


  export type pagesSelect = {
    chapter_id?: boolean
    page_id?: boolean
    page_number?: boolean
    page_url?: boolean
    chapters?: boolean | chaptersArgs
  }


  export type pagesInclude = {
    chapters?: boolean | chaptersArgs
  }

  export type pagesGetPayload<S extends boolean | null | undefined | pagesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? pages :
    S extends undefined ? never :
    S extends { include: any } & (pagesArgs | pagesFindManyArgs)
    ? pages  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'chapters' ? chaptersGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (pagesArgs | pagesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'chapters' ? chaptersGetPayload<S['select'][P]> | null :  P extends keyof pages ? pages[P] : never
  } 
      : pages


  type pagesCountArgs = 
    Omit<pagesFindManyArgs, 'select' | 'include'> & {
      select?: PagesCountAggregateInputType | true
    }

  export interface pagesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Pages that matches the filter.
     * @param {pagesFindUniqueArgs} args - Arguments to find a Pages
     * @example
     * // Get one Pages
     * const pages = await prisma.pages.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends pagesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, pagesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'pages'> extends True ? Prisma__pagesClient<pagesGetPayload<T>> : Prisma__pagesClient<pagesGetPayload<T> | null, null>

    /**
     * Find one Pages that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {pagesFindUniqueOrThrowArgs} args - Arguments to find a Pages
     * @example
     * // Get one Pages
     * const pages = await prisma.pages.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends pagesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, pagesFindUniqueOrThrowArgs>
    ): Prisma__pagesClient<pagesGetPayload<T>>

    /**
     * Find the first Pages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pagesFindFirstArgs} args - Arguments to find a Pages
     * @example
     * // Get one Pages
     * const pages = await prisma.pages.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends pagesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, pagesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'pages'> extends True ? Prisma__pagesClient<pagesGetPayload<T>> : Prisma__pagesClient<pagesGetPayload<T> | null, null>

    /**
     * Find the first Pages that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pagesFindFirstOrThrowArgs} args - Arguments to find a Pages
     * @example
     * // Get one Pages
     * const pages = await prisma.pages.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends pagesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, pagesFindFirstOrThrowArgs>
    ): Prisma__pagesClient<pagesGetPayload<T>>

    /**
     * Find zero or more Pages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pagesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pages
     * const pages = await prisma.pages.findMany()
     * 
     * // Get first 10 Pages
     * const pages = await prisma.pages.findMany({ take: 10 })
     * 
     * // Only select the `chapter_id`
     * const pagesWithChapter_idOnly = await prisma.pages.findMany({ select: { chapter_id: true } })
     * 
    **/
    findMany<T extends pagesFindManyArgs>(
      args?: SelectSubset<T, pagesFindManyArgs>
    ): Prisma.PrismaPromise<Array<pagesGetPayload<T>>>

    /**
     * Create a Pages.
     * @param {pagesCreateArgs} args - Arguments to create a Pages.
     * @example
     * // Create one Pages
     * const Pages = await prisma.pages.create({
     *   data: {
     *     // ... data to create a Pages
     *   }
     * })
     * 
    **/
    create<T extends pagesCreateArgs>(
      args: SelectSubset<T, pagesCreateArgs>
    ): Prisma__pagesClient<pagesGetPayload<T>>

    /**
     * Create many Pages.
     *     @param {pagesCreateManyArgs} args - Arguments to create many Pages.
     *     @example
     *     // Create many Pages
     *     const pages = await prisma.pages.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends pagesCreateManyArgs>(
      args?: SelectSubset<T, pagesCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Pages.
     * @param {pagesDeleteArgs} args - Arguments to delete one Pages.
     * @example
     * // Delete one Pages
     * const Pages = await prisma.pages.delete({
     *   where: {
     *     // ... filter to delete one Pages
     *   }
     * })
     * 
    **/
    delete<T extends pagesDeleteArgs>(
      args: SelectSubset<T, pagesDeleteArgs>
    ): Prisma__pagesClient<pagesGetPayload<T>>

    /**
     * Update one Pages.
     * @param {pagesUpdateArgs} args - Arguments to update one Pages.
     * @example
     * // Update one Pages
     * const pages = await prisma.pages.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends pagesUpdateArgs>(
      args: SelectSubset<T, pagesUpdateArgs>
    ): Prisma__pagesClient<pagesGetPayload<T>>

    /**
     * Delete zero or more Pages.
     * @param {pagesDeleteManyArgs} args - Arguments to filter Pages to delete.
     * @example
     * // Delete a few Pages
     * const { count } = await prisma.pages.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends pagesDeleteManyArgs>(
      args?: SelectSubset<T, pagesDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pagesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pages
     * const pages = await prisma.pages.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends pagesUpdateManyArgs>(
      args: SelectSubset<T, pagesUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pages.
     * @param {pagesUpsertArgs} args - Arguments to update or create a Pages.
     * @example
     * // Update or create a Pages
     * const pages = await prisma.pages.upsert({
     *   create: {
     *     // ... data to create a Pages
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pages we want to update
     *   }
     * })
    **/
    upsert<T extends pagesUpsertArgs>(
      args: SelectSubset<T, pagesUpsertArgs>
    ): Prisma__pagesClient<pagesGetPayload<T>>

    /**
     * Count the number of Pages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pagesCountArgs} args - Arguments to filter Pages to count.
     * @example
     * // Count the number of Pages
     * const count = await prisma.pages.count({
     *   where: {
     *     // ... the filter for the Pages we want to count
     *   }
     * })
    **/
    count<T extends pagesCountArgs>(
      args?: Subset<T, pagesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PagesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PagesAggregateArgs>(args: Subset<T, PagesAggregateArgs>): Prisma.PrismaPromise<GetPagesAggregateType<T>>

    /**
     * Group by Pages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PagesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PagesGroupByArgs['orderBy'] }
        : { orderBy?: PagesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PagesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPagesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for pages.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__pagesClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    chapters<T extends chaptersArgs= {}>(args?: Subset<T, chaptersArgs>): Prisma__chaptersClient<chaptersGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * pages base type for findUnique actions
   */
  export type pagesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the pages
     */
    select?: pagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: pagesInclude | null
    /**
     * Filter, which pages to fetch.
     */
    where: pagesWhereUniqueInput
  }

  /**
   * pages findUnique
   */
  export interface pagesFindUniqueArgs extends pagesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * pages findUniqueOrThrow
   */
  export type pagesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the pages
     */
    select?: pagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: pagesInclude | null
    /**
     * Filter, which pages to fetch.
     */
    where: pagesWhereUniqueInput
  }


  /**
   * pages base type for findFirst actions
   */
  export type pagesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the pages
     */
    select?: pagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: pagesInclude | null
    /**
     * Filter, which pages to fetch.
     */
    where?: pagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pages to fetch.
     */
    orderBy?: Enumerable<pagesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for pages.
     */
    cursor?: pagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of pages.
     */
    distinct?: Enumerable<PagesScalarFieldEnum>
  }

  /**
   * pages findFirst
   */
  export interface pagesFindFirstArgs extends pagesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * pages findFirstOrThrow
   */
  export type pagesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the pages
     */
    select?: pagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: pagesInclude | null
    /**
     * Filter, which pages to fetch.
     */
    where?: pagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pages to fetch.
     */
    orderBy?: Enumerable<pagesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for pages.
     */
    cursor?: pagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of pages.
     */
    distinct?: Enumerable<PagesScalarFieldEnum>
  }


  /**
   * pages findMany
   */
  export type pagesFindManyArgs = {
    /**
     * Select specific fields to fetch from the pages
     */
    select?: pagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: pagesInclude | null
    /**
     * Filter, which pages to fetch.
     */
    where?: pagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pages to fetch.
     */
    orderBy?: Enumerable<pagesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing pages.
     */
    cursor?: pagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pages.
     */
    skip?: number
    distinct?: Enumerable<PagesScalarFieldEnum>
  }


  /**
   * pages create
   */
  export type pagesCreateArgs = {
    /**
     * Select specific fields to fetch from the pages
     */
    select?: pagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: pagesInclude | null
    /**
     * The data needed to create a pages.
     */
    data: XOR<pagesCreateInput, pagesUncheckedCreateInput>
  }


  /**
   * pages createMany
   */
  export type pagesCreateManyArgs = {
    /**
     * The data used to create many pages.
     */
    data: Enumerable<pagesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * pages update
   */
  export type pagesUpdateArgs = {
    /**
     * Select specific fields to fetch from the pages
     */
    select?: pagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: pagesInclude | null
    /**
     * The data needed to update a pages.
     */
    data: XOR<pagesUpdateInput, pagesUncheckedUpdateInput>
    /**
     * Choose, which pages to update.
     */
    where: pagesWhereUniqueInput
  }


  /**
   * pages updateMany
   */
  export type pagesUpdateManyArgs = {
    /**
     * The data used to update pages.
     */
    data: XOR<pagesUpdateManyMutationInput, pagesUncheckedUpdateManyInput>
    /**
     * Filter which pages to update
     */
    where?: pagesWhereInput
  }


  /**
   * pages upsert
   */
  export type pagesUpsertArgs = {
    /**
     * Select specific fields to fetch from the pages
     */
    select?: pagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: pagesInclude | null
    /**
     * The filter to search for the pages to update in case it exists.
     */
    where: pagesWhereUniqueInput
    /**
     * In case the pages found by the `where` argument doesn't exist, create a new pages with this data.
     */
    create: XOR<pagesCreateInput, pagesUncheckedCreateInput>
    /**
     * In case the pages was found with the provided `where` argument, update it with this data.
     */
    update: XOR<pagesUpdateInput, pagesUncheckedUpdateInput>
  }


  /**
   * pages delete
   */
  export type pagesDeleteArgs = {
    /**
     * Select specific fields to fetch from the pages
     */
    select?: pagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: pagesInclude | null
    /**
     * Filter which pages to delete.
     */
    where: pagesWhereUniqueInput
  }


  /**
   * pages deleteMany
   */
  export type pagesDeleteManyArgs = {
    /**
     * Filter which pages to delete
     */
    where?: pagesWhereInput
  }


  /**
   * pages without action
   */
  export type pagesArgs = {
    /**
     * Select specific fields to fetch from the pages
     */
    select?: pagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: pagesInclude | null
  }



  /**
   * Model stories
   */


  export type AggregateStories = {
    _count: StoriesCountAggregateOutputType | null
    _avg: StoriesAvgAggregateOutputType | null
    _sum: StoriesSumAggregateOutputType | null
    _min: StoriesMinAggregateOutputType | null
    _max: StoriesMaxAggregateOutputType | null
  }

  export type StoriesAvgAggregateOutputType = {
    id: number | null
  }

  export type StoriesSumAggregateOutputType = {
    id: number | null
  }

  export type StoriesMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    genres: string | null
    cover: string | null
    url: string | null
  }

  export type StoriesMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    genres: string | null
    cover: string | null
    url: string | null
  }

  export type StoriesCountAggregateOutputType = {
    id: number
    title: number
    description: number
    genres: number
    cover: number
    url: number
    _all: number
  }


  export type StoriesAvgAggregateInputType = {
    id?: true
  }

  export type StoriesSumAggregateInputType = {
    id?: true
  }

  export type StoriesMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    genres?: true
    cover?: true
    url?: true
  }

  export type StoriesMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    genres?: true
    cover?: true
    url?: true
  }

  export type StoriesCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    genres?: true
    cover?: true
    url?: true
    _all?: true
  }

  export type StoriesAggregateArgs = {
    /**
     * Filter which stories to aggregate.
     */
    where?: storiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of stories to fetch.
     */
    orderBy?: Enumerable<storiesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: storiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` stories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` stories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned stories
    **/
    _count?: true | StoriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StoriesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StoriesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StoriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StoriesMaxAggregateInputType
  }

  export type GetStoriesAggregateType<T extends StoriesAggregateArgs> = {
        [P in keyof T & keyof AggregateStories]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStories[P]>
      : GetScalarType<T[P], AggregateStories[P]>
  }




  export type StoriesGroupByArgs = {
    where?: storiesWhereInput
    orderBy?: Enumerable<storiesOrderByWithAggregationInput>
    by: StoriesScalarFieldEnum[]
    having?: storiesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StoriesCountAggregateInputType | true
    _avg?: StoriesAvgAggregateInputType
    _sum?: StoriesSumAggregateInputType
    _min?: StoriesMinAggregateInputType
    _max?: StoriesMaxAggregateInputType
  }


  export type StoriesGroupByOutputType = {
    id: number
    title: string
    description: string
    genres: string
    cover: string
    url: string | null
    _count: StoriesCountAggregateOutputType | null
    _avg: StoriesAvgAggregateOutputType | null
    _sum: StoriesSumAggregateOutputType | null
    _min: StoriesMinAggregateOutputType | null
    _max: StoriesMaxAggregateOutputType | null
  }

  type GetStoriesGroupByPayload<T extends StoriesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<StoriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StoriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StoriesGroupByOutputType[P]>
            : GetScalarType<T[P], StoriesGroupByOutputType[P]>
        }
      >
    >


  export type storiesSelect = {
    id?: boolean
    title?: boolean
    description?: boolean
    genres?: boolean
    cover?: boolean
    url?: boolean
    chapters?: boolean | stories$chaptersArgs
    _count?: boolean | StoriesCountOutputTypeArgs
  }


  export type storiesInclude = {
    chapters?: boolean | stories$chaptersArgs
    _count?: boolean | StoriesCountOutputTypeArgs
  }

  export type storiesGetPayload<S extends boolean | null | undefined | storiesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? stories :
    S extends undefined ? never :
    S extends { include: any } & (storiesArgs | storiesFindManyArgs)
    ? stories  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'chapters' ? Array < chaptersGetPayload<S['include'][P]>>  :
        P extends '_count' ? StoriesCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (storiesArgs | storiesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'chapters' ? Array < chaptersGetPayload<S['select'][P]>>  :
        P extends '_count' ? StoriesCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof stories ? stories[P] : never
  } 
      : stories


  type storiesCountArgs = 
    Omit<storiesFindManyArgs, 'select' | 'include'> & {
      select?: StoriesCountAggregateInputType | true
    }

  export interface storiesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Stories that matches the filter.
     * @param {storiesFindUniqueArgs} args - Arguments to find a Stories
     * @example
     * // Get one Stories
     * const stories = await prisma.stories.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends storiesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, storiesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'stories'> extends True ? Prisma__storiesClient<storiesGetPayload<T>> : Prisma__storiesClient<storiesGetPayload<T> | null, null>

    /**
     * Find one Stories that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {storiesFindUniqueOrThrowArgs} args - Arguments to find a Stories
     * @example
     * // Get one Stories
     * const stories = await prisma.stories.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends storiesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, storiesFindUniqueOrThrowArgs>
    ): Prisma__storiesClient<storiesGetPayload<T>>

    /**
     * Find the first Stories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {storiesFindFirstArgs} args - Arguments to find a Stories
     * @example
     * // Get one Stories
     * const stories = await prisma.stories.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends storiesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, storiesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'stories'> extends True ? Prisma__storiesClient<storiesGetPayload<T>> : Prisma__storiesClient<storiesGetPayload<T> | null, null>

    /**
     * Find the first Stories that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {storiesFindFirstOrThrowArgs} args - Arguments to find a Stories
     * @example
     * // Get one Stories
     * const stories = await prisma.stories.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends storiesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, storiesFindFirstOrThrowArgs>
    ): Prisma__storiesClient<storiesGetPayload<T>>

    /**
     * Find zero or more Stories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {storiesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stories
     * const stories = await prisma.stories.findMany()
     * 
     * // Get first 10 Stories
     * const stories = await prisma.stories.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const storiesWithIdOnly = await prisma.stories.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends storiesFindManyArgs>(
      args?: SelectSubset<T, storiesFindManyArgs>
    ): Prisma.PrismaPromise<Array<storiesGetPayload<T>>>

    /**
     * Create a Stories.
     * @param {storiesCreateArgs} args - Arguments to create a Stories.
     * @example
     * // Create one Stories
     * const Stories = await prisma.stories.create({
     *   data: {
     *     // ... data to create a Stories
     *   }
     * })
     * 
    **/
    create<T extends storiesCreateArgs>(
      args: SelectSubset<T, storiesCreateArgs>
    ): Prisma__storiesClient<storiesGetPayload<T>>

    /**
     * Create many Stories.
     *     @param {storiesCreateManyArgs} args - Arguments to create many Stories.
     *     @example
     *     // Create many Stories
     *     const stories = await prisma.stories.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends storiesCreateManyArgs>(
      args?: SelectSubset<T, storiesCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Stories.
     * @param {storiesDeleteArgs} args - Arguments to delete one Stories.
     * @example
     * // Delete one Stories
     * const Stories = await prisma.stories.delete({
     *   where: {
     *     // ... filter to delete one Stories
     *   }
     * })
     * 
    **/
    delete<T extends storiesDeleteArgs>(
      args: SelectSubset<T, storiesDeleteArgs>
    ): Prisma__storiesClient<storiesGetPayload<T>>

    /**
     * Update one Stories.
     * @param {storiesUpdateArgs} args - Arguments to update one Stories.
     * @example
     * // Update one Stories
     * const stories = await prisma.stories.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends storiesUpdateArgs>(
      args: SelectSubset<T, storiesUpdateArgs>
    ): Prisma__storiesClient<storiesGetPayload<T>>

    /**
     * Delete zero or more Stories.
     * @param {storiesDeleteManyArgs} args - Arguments to filter Stories to delete.
     * @example
     * // Delete a few Stories
     * const { count } = await prisma.stories.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends storiesDeleteManyArgs>(
      args?: SelectSubset<T, storiesDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {storiesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stories
     * const stories = await prisma.stories.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends storiesUpdateManyArgs>(
      args: SelectSubset<T, storiesUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Stories.
     * @param {storiesUpsertArgs} args - Arguments to update or create a Stories.
     * @example
     * // Update or create a Stories
     * const stories = await prisma.stories.upsert({
     *   create: {
     *     // ... data to create a Stories
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Stories we want to update
     *   }
     * })
    **/
    upsert<T extends storiesUpsertArgs>(
      args: SelectSubset<T, storiesUpsertArgs>
    ): Prisma__storiesClient<storiesGetPayload<T>>

    /**
     * Count the number of Stories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {storiesCountArgs} args - Arguments to filter Stories to count.
     * @example
     * // Count the number of Stories
     * const count = await prisma.stories.count({
     *   where: {
     *     // ... the filter for the Stories we want to count
     *   }
     * })
    **/
    count<T extends storiesCountArgs>(
      args?: Subset<T, storiesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StoriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Stories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StoriesAggregateArgs>(args: Subset<T, StoriesAggregateArgs>): Prisma.PrismaPromise<GetStoriesAggregateType<T>>

    /**
     * Group by Stories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StoriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StoriesGroupByArgs['orderBy'] }
        : { orderBy?: StoriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StoriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStoriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for stories.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__storiesClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    chapters<T extends stories$chaptersArgs= {}>(args?: Subset<T, stories$chaptersArgs>): Prisma.PrismaPromise<Array<chaptersGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * stories base type for findUnique actions
   */
  export type storiesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the stories
     */
    select?: storiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: storiesInclude | null
    /**
     * Filter, which stories to fetch.
     */
    where: storiesWhereUniqueInput
  }

  /**
   * stories findUnique
   */
  export interface storiesFindUniqueArgs extends storiesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * stories findUniqueOrThrow
   */
  export type storiesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the stories
     */
    select?: storiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: storiesInclude | null
    /**
     * Filter, which stories to fetch.
     */
    where: storiesWhereUniqueInput
  }


  /**
   * stories base type for findFirst actions
   */
  export type storiesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the stories
     */
    select?: storiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: storiesInclude | null
    /**
     * Filter, which stories to fetch.
     */
    where?: storiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of stories to fetch.
     */
    orderBy?: Enumerable<storiesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for stories.
     */
    cursor?: storiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` stories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` stories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of stories.
     */
    distinct?: Enumerable<StoriesScalarFieldEnum>
  }

  /**
   * stories findFirst
   */
  export interface storiesFindFirstArgs extends storiesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * stories findFirstOrThrow
   */
  export type storiesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the stories
     */
    select?: storiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: storiesInclude | null
    /**
     * Filter, which stories to fetch.
     */
    where?: storiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of stories to fetch.
     */
    orderBy?: Enumerable<storiesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for stories.
     */
    cursor?: storiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` stories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` stories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of stories.
     */
    distinct?: Enumerable<StoriesScalarFieldEnum>
  }


  /**
   * stories findMany
   */
  export type storiesFindManyArgs = {
    /**
     * Select specific fields to fetch from the stories
     */
    select?: storiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: storiesInclude | null
    /**
     * Filter, which stories to fetch.
     */
    where?: storiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of stories to fetch.
     */
    orderBy?: Enumerable<storiesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing stories.
     */
    cursor?: storiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` stories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` stories.
     */
    skip?: number
    distinct?: Enumerable<StoriesScalarFieldEnum>
  }


  /**
   * stories create
   */
  export type storiesCreateArgs = {
    /**
     * Select specific fields to fetch from the stories
     */
    select?: storiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: storiesInclude | null
    /**
     * The data needed to create a stories.
     */
    data: XOR<storiesCreateInput, storiesUncheckedCreateInput>
  }


  /**
   * stories createMany
   */
  export type storiesCreateManyArgs = {
    /**
     * The data used to create many stories.
     */
    data: Enumerable<storiesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * stories update
   */
  export type storiesUpdateArgs = {
    /**
     * Select specific fields to fetch from the stories
     */
    select?: storiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: storiesInclude | null
    /**
     * The data needed to update a stories.
     */
    data: XOR<storiesUpdateInput, storiesUncheckedUpdateInput>
    /**
     * Choose, which stories to update.
     */
    where: storiesWhereUniqueInput
  }


  /**
   * stories updateMany
   */
  export type storiesUpdateManyArgs = {
    /**
     * The data used to update stories.
     */
    data: XOR<storiesUpdateManyMutationInput, storiesUncheckedUpdateManyInput>
    /**
     * Filter which stories to update
     */
    where?: storiesWhereInput
  }


  /**
   * stories upsert
   */
  export type storiesUpsertArgs = {
    /**
     * Select specific fields to fetch from the stories
     */
    select?: storiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: storiesInclude | null
    /**
     * The filter to search for the stories to update in case it exists.
     */
    where: storiesWhereUniqueInput
    /**
     * In case the stories found by the `where` argument doesn't exist, create a new stories with this data.
     */
    create: XOR<storiesCreateInput, storiesUncheckedCreateInput>
    /**
     * In case the stories was found with the provided `where` argument, update it with this data.
     */
    update: XOR<storiesUpdateInput, storiesUncheckedUpdateInput>
  }


  /**
   * stories delete
   */
  export type storiesDeleteArgs = {
    /**
     * Select specific fields to fetch from the stories
     */
    select?: storiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: storiesInclude | null
    /**
     * Filter which stories to delete.
     */
    where: storiesWhereUniqueInput
  }


  /**
   * stories deleteMany
   */
  export type storiesDeleteManyArgs = {
    /**
     * Filter which stories to delete
     */
    where?: storiesWhereInput
  }


  /**
   * stories.chapters
   */
  export type stories$chaptersArgs = {
    /**
     * Select specific fields to fetch from the chapters
     */
    select?: chaptersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: chaptersInclude | null
    where?: chaptersWhereInput
    orderBy?: Enumerable<chaptersOrderByWithRelationInput>
    cursor?: chaptersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ChaptersScalarFieldEnum>
  }


  /**
   * stories without action
   */
  export type storiesArgs = {
    /**
     * Select specific fields to fetch from the stories
     */
    select?: storiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: storiesInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ChaptersScalarFieldEnum: {
    title: 'title',
    chapter_id: 'chapter_id',
    chapter_number: 'chapter_number',
    summary: 'summary',
    id: 'id',
    first: 'first',
    last: 'last'
  };

  export type ChaptersScalarFieldEnum = (typeof ChaptersScalarFieldEnum)[keyof typeof ChaptersScalarFieldEnum]


  export const PagesScalarFieldEnum: {
    chapter_id: 'chapter_id',
    page_id: 'page_id',
    page_number: 'page_number',
    page_url: 'page_url'
  };

  export type PagesScalarFieldEnum = (typeof PagesScalarFieldEnum)[keyof typeof PagesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const StoriesScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    genres: 'genres',
    cover: 'cover',
    url: 'url'
  };

  export type StoriesScalarFieldEnum = (typeof StoriesScalarFieldEnum)[keyof typeof StoriesScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  /**
   * Deep Input Types
   */


  export type chaptersWhereInput = {
    AND?: Enumerable<chaptersWhereInput>
    OR?: Enumerable<chaptersWhereInput>
    NOT?: Enumerable<chaptersWhereInput>
    title?: StringNullableFilter | string | null
    chapter_id?: IntFilter | number
    chapter_number?: IntNullableFilter | number | null
    summary?: StringNullableFilter | string | null
    id?: IntNullableFilter | number | null
    first?: BoolFilter | boolean
    last?: BoolFilter | boolean
    stories?: XOR<StoriesRelationFilter, storiesWhereInput> | null
    pages?: PagesListRelationFilter
  }

  export type chaptersOrderByWithRelationInput = {
    title?: SortOrder
    chapter_id?: SortOrder
    chapter_number?: SortOrder
    summary?: SortOrder
    id?: SortOrder
    first?: SortOrder
    last?: SortOrder
    stories?: storiesOrderByWithRelationInput
    pages?: pagesOrderByRelationAggregateInput
  }

  export type chaptersWhereUniqueInput = {
    chapter_id?: number
  }

  export type chaptersOrderByWithAggregationInput = {
    title?: SortOrder
    chapter_id?: SortOrder
    chapter_number?: SortOrder
    summary?: SortOrder
    id?: SortOrder
    first?: SortOrder
    last?: SortOrder
    _count?: chaptersCountOrderByAggregateInput
    _avg?: chaptersAvgOrderByAggregateInput
    _max?: chaptersMaxOrderByAggregateInput
    _min?: chaptersMinOrderByAggregateInput
    _sum?: chaptersSumOrderByAggregateInput
  }

  export type chaptersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<chaptersScalarWhereWithAggregatesInput>
    OR?: Enumerable<chaptersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<chaptersScalarWhereWithAggregatesInput>
    title?: StringNullableWithAggregatesFilter | string | null
    chapter_id?: IntWithAggregatesFilter | number
    chapter_number?: IntNullableWithAggregatesFilter | number | null
    summary?: StringNullableWithAggregatesFilter | string | null
    id?: IntNullableWithAggregatesFilter | number | null
    first?: BoolWithAggregatesFilter | boolean
    last?: BoolWithAggregatesFilter | boolean
  }

  export type pagesWhereInput = {
    AND?: Enumerable<pagesWhereInput>
    OR?: Enumerable<pagesWhereInput>
    NOT?: Enumerable<pagesWhereInput>
    chapter_id?: IntNullableFilter | number | null
    page_id?: IntFilter | number
    page_number?: IntNullableFilter | number | null
    page_url?: StringNullableFilter | string | null
    chapters?: XOR<ChaptersRelationFilter, chaptersWhereInput> | null
  }

  export type pagesOrderByWithRelationInput = {
    chapter_id?: SortOrder
    page_id?: SortOrder
    page_number?: SortOrder
    page_url?: SortOrder
    chapters?: chaptersOrderByWithRelationInput
  }

  export type pagesWhereUniqueInput = {
    page_id?: number
  }

  export type pagesOrderByWithAggregationInput = {
    chapter_id?: SortOrder
    page_id?: SortOrder
    page_number?: SortOrder
    page_url?: SortOrder
    _count?: pagesCountOrderByAggregateInput
    _avg?: pagesAvgOrderByAggregateInput
    _max?: pagesMaxOrderByAggregateInput
    _min?: pagesMinOrderByAggregateInput
    _sum?: pagesSumOrderByAggregateInput
  }

  export type pagesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<pagesScalarWhereWithAggregatesInput>
    OR?: Enumerable<pagesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<pagesScalarWhereWithAggregatesInput>
    chapter_id?: IntNullableWithAggregatesFilter | number | null
    page_id?: IntWithAggregatesFilter | number
    page_number?: IntNullableWithAggregatesFilter | number | null
    page_url?: StringNullableWithAggregatesFilter | string | null
  }

  export type storiesWhereInput = {
    AND?: Enumerable<storiesWhereInput>
    OR?: Enumerable<storiesWhereInput>
    NOT?: Enumerable<storiesWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    description?: StringFilter | string
    genres?: StringFilter | string
    cover?: StringFilter | string
    url?: StringNullableFilter | string | null
    chapters?: ChaptersListRelationFilter
  }

  export type storiesOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    genres?: SortOrder
    cover?: SortOrder
    url?: SortOrder
    chapters?: chaptersOrderByRelationAggregateInput
  }

  export type storiesWhereUniqueInput = {
    id?: number
    title?: string
    description?: string
    cover?: string
  }

  export type storiesOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    genres?: SortOrder
    cover?: SortOrder
    url?: SortOrder
    _count?: storiesCountOrderByAggregateInput
    _avg?: storiesAvgOrderByAggregateInput
    _max?: storiesMaxOrderByAggregateInput
    _min?: storiesMinOrderByAggregateInput
    _sum?: storiesSumOrderByAggregateInput
  }

  export type storiesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<storiesScalarWhereWithAggregatesInput>
    OR?: Enumerable<storiesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<storiesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    genres?: StringWithAggregatesFilter | string
    cover?: StringWithAggregatesFilter | string
    url?: StringNullableWithAggregatesFilter | string | null
  }

  export type chaptersCreateInput = {
    title?: string | null
    chapter_number?: number | null
    summary?: string | null
    first?: boolean
    last?: boolean
    stories?: storiesCreateNestedOneWithoutChaptersInput
    pages?: pagesCreateNestedManyWithoutChaptersInput
  }

  export type chaptersUncheckedCreateInput = {
    title?: string | null
    chapter_id?: number
    chapter_number?: number | null
    summary?: string | null
    id?: number | null
    first?: boolean
    last?: boolean
    pages?: pagesUncheckedCreateNestedManyWithoutChaptersInput
  }

  export type chaptersUpdateInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    chapter_number?: NullableIntFieldUpdateOperationsInput | number | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    first?: BoolFieldUpdateOperationsInput | boolean
    last?: BoolFieldUpdateOperationsInput | boolean
    stories?: storiesUpdateOneWithoutChaptersNestedInput
    pages?: pagesUpdateManyWithoutChaptersNestedInput
  }

  export type chaptersUncheckedUpdateInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    chapter_id?: IntFieldUpdateOperationsInput | number
    chapter_number?: NullableIntFieldUpdateOperationsInput | number | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    id?: NullableIntFieldUpdateOperationsInput | number | null
    first?: BoolFieldUpdateOperationsInput | boolean
    last?: BoolFieldUpdateOperationsInput | boolean
    pages?: pagesUncheckedUpdateManyWithoutChaptersNestedInput
  }

  export type chaptersCreateManyInput = {
    title?: string | null
    chapter_id?: number
    chapter_number?: number | null
    summary?: string | null
    id?: number | null
    first?: boolean
    last?: boolean
  }

  export type chaptersUpdateManyMutationInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    chapter_number?: NullableIntFieldUpdateOperationsInput | number | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    first?: BoolFieldUpdateOperationsInput | boolean
    last?: BoolFieldUpdateOperationsInput | boolean
  }

  export type chaptersUncheckedUpdateManyInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    chapter_id?: IntFieldUpdateOperationsInput | number
    chapter_number?: NullableIntFieldUpdateOperationsInput | number | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    id?: NullableIntFieldUpdateOperationsInput | number | null
    first?: BoolFieldUpdateOperationsInput | boolean
    last?: BoolFieldUpdateOperationsInput | boolean
  }

  export type pagesCreateInput = {
    page_id: number
    page_number?: number | null
    page_url?: string | null
    chapters?: chaptersCreateNestedOneWithoutPagesInput
  }

  export type pagesUncheckedCreateInput = {
    chapter_id?: number | null
    page_id: number
    page_number?: number | null
    page_url?: string | null
  }

  export type pagesUpdateInput = {
    page_id?: IntFieldUpdateOperationsInput | number
    page_number?: NullableIntFieldUpdateOperationsInput | number | null
    page_url?: NullableStringFieldUpdateOperationsInput | string | null
    chapters?: chaptersUpdateOneWithoutPagesNestedInput
  }

  export type pagesUncheckedUpdateInput = {
    chapter_id?: NullableIntFieldUpdateOperationsInput | number | null
    page_id?: IntFieldUpdateOperationsInput | number
    page_number?: NullableIntFieldUpdateOperationsInput | number | null
    page_url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type pagesCreateManyInput = {
    chapter_id?: number | null
    page_id: number
    page_number?: number | null
    page_url?: string | null
  }

  export type pagesUpdateManyMutationInput = {
    page_id?: IntFieldUpdateOperationsInput | number
    page_number?: NullableIntFieldUpdateOperationsInput | number | null
    page_url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type pagesUncheckedUpdateManyInput = {
    chapter_id?: NullableIntFieldUpdateOperationsInput | number | null
    page_id?: IntFieldUpdateOperationsInput | number
    page_number?: NullableIntFieldUpdateOperationsInput | number | null
    page_url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type storiesCreateInput = {
    id: number
    title: string
    description: string
    genres: string
    cover: string
    url?: string | null
    chapters?: chaptersCreateNestedManyWithoutStoriesInput
  }

  export type storiesUncheckedCreateInput = {
    id: number
    title: string
    description: string
    genres: string
    cover: string
    url?: string | null
    chapters?: chaptersUncheckedCreateNestedManyWithoutStoriesInput
  }

  export type storiesUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    genres?: StringFieldUpdateOperationsInput | string
    cover?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    chapters?: chaptersUpdateManyWithoutStoriesNestedInput
  }

  export type storiesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    genres?: StringFieldUpdateOperationsInput | string
    cover?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    chapters?: chaptersUncheckedUpdateManyWithoutStoriesNestedInput
  }

  export type storiesCreateManyInput = {
    id: number
    title: string
    description: string
    genres: string
    cover: string
    url?: string | null
  }

  export type storiesUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    genres?: StringFieldUpdateOperationsInput | string
    cover?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type storiesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    genres?: StringFieldUpdateOperationsInput | string
    cover?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type StoriesRelationFilter = {
    is?: storiesWhereInput | null
    isNot?: storiesWhereInput | null
  }

  export type PagesListRelationFilter = {
    every?: pagesWhereInput
    some?: pagesWhereInput
    none?: pagesWhereInput
  }

  export type pagesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type chaptersCountOrderByAggregateInput = {
    title?: SortOrder
    chapter_id?: SortOrder
    chapter_number?: SortOrder
    summary?: SortOrder
    id?: SortOrder
    first?: SortOrder
    last?: SortOrder
  }

  export type chaptersAvgOrderByAggregateInput = {
    chapter_id?: SortOrder
    chapter_number?: SortOrder
    id?: SortOrder
  }

  export type chaptersMaxOrderByAggregateInput = {
    title?: SortOrder
    chapter_id?: SortOrder
    chapter_number?: SortOrder
    summary?: SortOrder
    id?: SortOrder
    first?: SortOrder
    last?: SortOrder
  }

  export type chaptersMinOrderByAggregateInput = {
    title?: SortOrder
    chapter_id?: SortOrder
    chapter_number?: SortOrder
    summary?: SortOrder
    id?: SortOrder
    first?: SortOrder
    last?: SortOrder
  }

  export type chaptersSumOrderByAggregateInput = {
    chapter_id?: SortOrder
    chapter_number?: SortOrder
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type ChaptersRelationFilter = {
    is?: chaptersWhereInput | null
    isNot?: chaptersWhereInput | null
  }

  export type pagesCountOrderByAggregateInput = {
    chapter_id?: SortOrder
    page_id?: SortOrder
    page_number?: SortOrder
    page_url?: SortOrder
  }

  export type pagesAvgOrderByAggregateInput = {
    chapter_id?: SortOrder
    page_id?: SortOrder
    page_number?: SortOrder
  }

  export type pagesMaxOrderByAggregateInput = {
    chapter_id?: SortOrder
    page_id?: SortOrder
    page_number?: SortOrder
    page_url?: SortOrder
  }

  export type pagesMinOrderByAggregateInput = {
    chapter_id?: SortOrder
    page_id?: SortOrder
    page_number?: SortOrder
    page_url?: SortOrder
  }

  export type pagesSumOrderByAggregateInput = {
    chapter_id?: SortOrder
    page_id?: SortOrder
    page_number?: SortOrder
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type ChaptersListRelationFilter = {
    every?: chaptersWhereInput
    some?: chaptersWhereInput
    none?: chaptersWhereInput
  }

  export type chaptersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type storiesCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    genres?: SortOrder
    cover?: SortOrder
    url?: SortOrder
  }

  export type storiesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type storiesMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    genres?: SortOrder
    cover?: SortOrder
    url?: SortOrder
  }

  export type storiesMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    genres?: SortOrder
    cover?: SortOrder
    url?: SortOrder
  }

  export type storiesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type storiesCreateNestedOneWithoutChaptersInput = {
    create?: XOR<storiesCreateWithoutChaptersInput, storiesUncheckedCreateWithoutChaptersInput>
    connectOrCreate?: storiesCreateOrConnectWithoutChaptersInput
    connect?: storiesWhereUniqueInput
  }

  export type pagesCreateNestedManyWithoutChaptersInput = {
    create?: XOR<Enumerable<pagesCreateWithoutChaptersInput>, Enumerable<pagesUncheckedCreateWithoutChaptersInput>>
    connectOrCreate?: Enumerable<pagesCreateOrConnectWithoutChaptersInput>
    createMany?: pagesCreateManyChaptersInputEnvelope
    connect?: Enumerable<pagesWhereUniqueInput>
  }

  export type pagesUncheckedCreateNestedManyWithoutChaptersInput = {
    create?: XOR<Enumerable<pagesCreateWithoutChaptersInput>, Enumerable<pagesUncheckedCreateWithoutChaptersInput>>
    connectOrCreate?: Enumerable<pagesCreateOrConnectWithoutChaptersInput>
    createMany?: pagesCreateManyChaptersInputEnvelope
    connect?: Enumerable<pagesWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type storiesUpdateOneWithoutChaptersNestedInput = {
    create?: XOR<storiesCreateWithoutChaptersInput, storiesUncheckedCreateWithoutChaptersInput>
    connectOrCreate?: storiesCreateOrConnectWithoutChaptersInput
    upsert?: storiesUpsertWithoutChaptersInput
    disconnect?: boolean
    delete?: boolean
    connect?: storiesWhereUniqueInput
    update?: XOR<storiesUpdateWithoutChaptersInput, storiesUncheckedUpdateWithoutChaptersInput>
  }

  export type pagesUpdateManyWithoutChaptersNestedInput = {
    create?: XOR<Enumerable<pagesCreateWithoutChaptersInput>, Enumerable<pagesUncheckedCreateWithoutChaptersInput>>
    connectOrCreate?: Enumerable<pagesCreateOrConnectWithoutChaptersInput>
    upsert?: Enumerable<pagesUpsertWithWhereUniqueWithoutChaptersInput>
    createMany?: pagesCreateManyChaptersInputEnvelope
    set?: Enumerable<pagesWhereUniqueInput>
    disconnect?: Enumerable<pagesWhereUniqueInput>
    delete?: Enumerable<pagesWhereUniqueInput>
    connect?: Enumerable<pagesWhereUniqueInput>
    update?: Enumerable<pagesUpdateWithWhereUniqueWithoutChaptersInput>
    updateMany?: Enumerable<pagesUpdateManyWithWhereWithoutChaptersInput>
    deleteMany?: Enumerable<pagesScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type pagesUncheckedUpdateManyWithoutChaptersNestedInput = {
    create?: XOR<Enumerable<pagesCreateWithoutChaptersInput>, Enumerable<pagesUncheckedCreateWithoutChaptersInput>>
    connectOrCreate?: Enumerable<pagesCreateOrConnectWithoutChaptersInput>
    upsert?: Enumerable<pagesUpsertWithWhereUniqueWithoutChaptersInput>
    createMany?: pagesCreateManyChaptersInputEnvelope
    set?: Enumerable<pagesWhereUniqueInput>
    disconnect?: Enumerable<pagesWhereUniqueInput>
    delete?: Enumerable<pagesWhereUniqueInput>
    connect?: Enumerable<pagesWhereUniqueInput>
    update?: Enumerable<pagesUpdateWithWhereUniqueWithoutChaptersInput>
    updateMany?: Enumerable<pagesUpdateManyWithWhereWithoutChaptersInput>
    deleteMany?: Enumerable<pagesScalarWhereInput>
  }

  export type chaptersCreateNestedOneWithoutPagesInput = {
    create?: XOR<chaptersCreateWithoutPagesInput, chaptersUncheckedCreateWithoutPagesInput>
    connectOrCreate?: chaptersCreateOrConnectWithoutPagesInput
    connect?: chaptersWhereUniqueInput
  }

  export type chaptersUpdateOneWithoutPagesNestedInput = {
    create?: XOR<chaptersCreateWithoutPagesInput, chaptersUncheckedCreateWithoutPagesInput>
    connectOrCreate?: chaptersCreateOrConnectWithoutPagesInput
    upsert?: chaptersUpsertWithoutPagesInput
    disconnect?: boolean
    delete?: boolean
    connect?: chaptersWhereUniqueInput
    update?: XOR<chaptersUpdateWithoutPagesInput, chaptersUncheckedUpdateWithoutPagesInput>
  }

  export type chaptersCreateNestedManyWithoutStoriesInput = {
    create?: XOR<Enumerable<chaptersCreateWithoutStoriesInput>, Enumerable<chaptersUncheckedCreateWithoutStoriesInput>>
    connectOrCreate?: Enumerable<chaptersCreateOrConnectWithoutStoriesInput>
    createMany?: chaptersCreateManyStoriesInputEnvelope
    connect?: Enumerable<chaptersWhereUniqueInput>
  }

  export type chaptersUncheckedCreateNestedManyWithoutStoriesInput = {
    create?: XOR<Enumerable<chaptersCreateWithoutStoriesInput>, Enumerable<chaptersUncheckedCreateWithoutStoriesInput>>
    connectOrCreate?: Enumerable<chaptersCreateOrConnectWithoutStoriesInput>
    createMany?: chaptersCreateManyStoriesInputEnvelope
    connect?: Enumerable<chaptersWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type chaptersUpdateManyWithoutStoriesNestedInput = {
    create?: XOR<Enumerable<chaptersCreateWithoutStoriesInput>, Enumerable<chaptersUncheckedCreateWithoutStoriesInput>>
    connectOrCreate?: Enumerable<chaptersCreateOrConnectWithoutStoriesInput>
    upsert?: Enumerable<chaptersUpsertWithWhereUniqueWithoutStoriesInput>
    createMany?: chaptersCreateManyStoriesInputEnvelope
    set?: Enumerable<chaptersWhereUniqueInput>
    disconnect?: Enumerable<chaptersWhereUniqueInput>
    delete?: Enumerable<chaptersWhereUniqueInput>
    connect?: Enumerable<chaptersWhereUniqueInput>
    update?: Enumerable<chaptersUpdateWithWhereUniqueWithoutStoriesInput>
    updateMany?: Enumerable<chaptersUpdateManyWithWhereWithoutStoriesInput>
    deleteMany?: Enumerable<chaptersScalarWhereInput>
  }

  export type chaptersUncheckedUpdateManyWithoutStoriesNestedInput = {
    create?: XOR<Enumerable<chaptersCreateWithoutStoriesInput>, Enumerable<chaptersUncheckedCreateWithoutStoriesInput>>
    connectOrCreate?: Enumerable<chaptersCreateOrConnectWithoutStoriesInput>
    upsert?: Enumerable<chaptersUpsertWithWhereUniqueWithoutStoriesInput>
    createMany?: chaptersCreateManyStoriesInputEnvelope
    set?: Enumerable<chaptersWhereUniqueInput>
    disconnect?: Enumerable<chaptersWhereUniqueInput>
    delete?: Enumerable<chaptersWhereUniqueInput>
    connect?: Enumerable<chaptersWhereUniqueInput>
    update?: Enumerable<chaptersUpdateWithWhereUniqueWithoutStoriesInput>
    updateMany?: Enumerable<chaptersUpdateManyWithWhereWithoutStoriesInput>
    deleteMany?: Enumerable<chaptersScalarWhereInput>
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type storiesCreateWithoutChaptersInput = {
    id: number
    title: string
    description: string
    genres: string
    cover: string
    url?: string | null
  }

  export type storiesUncheckedCreateWithoutChaptersInput = {
    id: number
    title: string
    description: string
    genres: string
    cover: string
    url?: string | null
  }

  export type storiesCreateOrConnectWithoutChaptersInput = {
    where: storiesWhereUniqueInput
    create: XOR<storiesCreateWithoutChaptersInput, storiesUncheckedCreateWithoutChaptersInput>
  }

  export type pagesCreateWithoutChaptersInput = {
    page_id: number
    page_number?: number | null
    page_url?: string | null
  }

  export type pagesUncheckedCreateWithoutChaptersInput = {
    page_id: number
    page_number?: number | null
    page_url?: string | null
  }

  export type pagesCreateOrConnectWithoutChaptersInput = {
    where: pagesWhereUniqueInput
    create: XOR<pagesCreateWithoutChaptersInput, pagesUncheckedCreateWithoutChaptersInput>
  }

  export type pagesCreateManyChaptersInputEnvelope = {
    data: Enumerable<pagesCreateManyChaptersInput>
    skipDuplicates?: boolean
  }

  export type storiesUpsertWithoutChaptersInput = {
    update: XOR<storiesUpdateWithoutChaptersInput, storiesUncheckedUpdateWithoutChaptersInput>
    create: XOR<storiesCreateWithoutChaptersInput, storiesUncheckedCreateWithoutChaptersInput>
  }

  export type storiesUpdateWithoutChaptersInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    genres?: StringFieldUpdateOperationsInput | string
    cover?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type storiesUncheckedUpdateWithoutChaptersInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    genres?: StringFieldUpdateOperationsInput | string
    cover?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type pagesUpsertWithWhereUniqueWithoutChaptersInput = {
    where: pagesWhereUniqueInput
    update: XOR<pagesUpdateWithoutChaptersInput, pagesUncheckedUpdateWithoutChaptersInput>
    create: XOR<pagesCreateWithoutChaptersInput, pagesUncheckedCreateWithoutChaptersInput>
  }

  export type pagesUpdateWithWhereUniqueWithoutChaptersInput = {
    where: pagesWhereUniqueInput
    data: XOR<pagesUpdateWithoutChaptersInput, pagesUncheckedUpdateWithoutChaptersInput>
  }

  export type pagesUpdateManyWithWhereWithoutChaptersInput = {
    where: pagesScalarWhereInput
    data: XOR<pagesUpdateManyMutationInput, pagesUncheckedUpdateManyWithoutPagesInput>
  }

  export type pagesScalarWhereInput = {
    AND?: Enumerable<pagesScalarWhereInput>
    OR?: Enumerable<pagesScalarWhereInput>
    NOT?: Enumerable<pagesScalarWhereInput>
    chapter_id?: IntNullableFilter | number | null
    page_id?: IntFilter | number
    page_number?: IntNullableFilter | number | null
    page_url?: StringNullableFilter | string | null
  }

  export type chaptersCreateWithoutPagesInput = {
    title?: string | null
    chapter_number?: number | null
    summary?: string | null
    first?: boolean
    last?: boolean
    stories?: storiesCreateNestedOneWithoutChaptersInput
  }

  export type chaptersUncheckedCreateWithoutPagesInput = {
    title?: string | null
    chapter_id?: number
    chapter_number?: number | null
    summary?: string | null
    id?: number | null
    first?: boolean
    last?: boolean
  }

  export type chaptersCreateOrConnectWithoutPagesInput = {
    where: chaptersWhereUniqueInput
    create: XOR<chaptersCreateWithoutPagesInput, chaptersUncheckedCreateWithoutPagesInput>
  }

  export type chaptersUpsertWithoutPagesInput = {
    update: XOR<chaptersUpdateWithoutPagesInput, chaptersUncheckedUpdateWithoutPagesInput>
    create: XOR<chaptersCreateWithoutPagesInput, chaptersUncheckedCreateWithoutPagesInput>
  }

  export type chaptersUpdateWithoutPagesInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    chapter_number?: NullableIntFieldUpdateOperationsInput | number | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    first?: BoolFieldUpdateOperationsInput | boolean
    last?: BoolFieldUpdateOperationsInput | boolean
    stories?: storiesUpdateOneWithoutChaptersNestedInput
  }

  export type chaptersUncheckedUpdateWithoutPagesInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    chapter_id?: IntFieldUpdateOperationsInput | number
    chapter_number?: NullableIntFieldUpdateOperationsInput | number | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    id?: NullableIntFieldUpdateOperationsInput | number | null
    first?: BoolFieldUpdateOperationsInput | boolean
    last?: BoolFieldUpdateOperationsInput | boolean
  }

  export type chaptersCreateWithoutStoriesInput = {
    title?: string | null
    chapter_number?: number | null
    summary?: string | null
    first?: boolean
    last?: boolean
    pages?: pagesCreateNestedManyWithoutChaptersInput
  }

  export type chaptersUncheckedCreateWithoutStoriesInput = {
    title?: string | null
    chapter_id?: number
    chapter_number?: number | null
    summary?: string | null
    first?: boolean
    last?: boolean
    pages?: pagesUncheckedCreateNestedManyWithoutChaptersInput
  }

  export type chaptersCreateOrConnectWithoutStoriesInput = {
    where: chaptersWhereUniqueInput
    create: XOR<chaptersCreateWithoutStoriesInput, chaptersUncheckedCreateWithoutStoriesInput>
  }

  export type chaptersCreateManyStoriesInputEnvelope = {
    data: Enumerable<chaptersCreateManyStoriesInput>
    skipDuplicates?: boolean
  }

  export type chaptersUpsertWithWhereUniqueWithoutStoriesInput = {
    where: chaptersWhereUniqueInput
    update: XOR<chaptersUpdateWithoutStoriesInput, chaptersUncheckedUpdateWithoutStoriesInput>
    create: XOR<chaptersCreateWithoutStoriesInput, chaptersUncheckedCreateWithoutStoriesInput>
  }

  export type chaptersUpdateWithWhereUniqueWithoutStoriesInput = {
    where: chaptersWhereUniqueInput
    data: XOR<chaptersUpdateWithoutStoriesInput, chaptersUncheckedUpdateWithoutStoriesInput>
  }

  export type chaptersUpdateManyWithWhereWithoutStoriesInput = {
    where: chaptersScalarWhereInput
    data: XOR<chaptersUpdateManyMutationInput, chaptersUncheckedUpdateManyWithoutChaptersInput>
  }

  export type chaptersScalarWhereInput = {
    AND?: Enumerable<chaptersScalarWhereInput>
    OR?: Enumerable<chaptersScalarWhereInput>
    NOT?: Enumerable<chaptersScalarWhereInput>
    title?: StringNullableFilter | string | null
    chapter_id?: IntFilter | number
    chapter_number?: IntNullableFilter | number | null
    summary?: StringNullableFilter | string | null
    id?: IntNullableFilter | number | null
    first?: BoolFilter | boolean
    last?: BoolFilter | boolean
  }

  export type pagesCreateManyChaptersInput = {
    page_id: number
    page_number?: number | null
    page_url?: string | null
  }

  export type pagesUpdateWithoutChaptersInput = {
    page_id?: IntFieldUpdateOperationsInput | number
    page_number?: NullableIntFieldUpdateOperationsInput | number | null
    page_url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type pagesUncheckedUpdateWithoutChaptersInput = {
    page_id?: IntFieldUpdateOperationsInput | number
    page_number?: NullableIntFieldUpdateOperationsInput | number | null
    page_url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type pagesUncheckedUpdateManyWithoutPagesInput = {
    page_id?: IntFieldUpdateOperationsInput | number
    page_number?: NullableIntFieldUpdateOperationsInput | number | null
    page_url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type chaptersCreateManyStoriesInput = {
    title?: string | null
    chapter_id?: number
    chapter_number?: number | null
    summary?: string | null
    first?: boolean
    last?: boolean
  }

  export type chaptersUpdateWithoutStoriesInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    chapter_number?: NullableIntFieldUpdateOperationsInput | number | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    first?: BoolFieldUpdateOperationsInput | boolean
    last?: BoolFieldUpdateOperationsInput | boolean
    pages?: pagesUpdateManyWithoutChaptersNestedInput
  }

  export type chaptersUncheckedUpdateWithoutStoriesInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    chapter_id?: IntFieldUpdateOperationsInput | number
    chapter_number?: NullableIntFieldUpdateOperationsInput | number | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    first?: BoolFieldUpdateOperationsInput | boolean
    last?: BoolFieldUpdateOperationsInput | boolean
    pages?: pagesUncheckedUpdateManyWithoutChaptersNestedInput
  }

  export type chaptersUncheckedUpdateManyWithoutChaptersInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    chapter_id?: IntFieldUpdateOperationsInput | number
    chapter_number?: NullableIntFieldUpdateOperationsInput | number | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    first?: BoolFieldUpdateOperationsInput | boolean
    last?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}